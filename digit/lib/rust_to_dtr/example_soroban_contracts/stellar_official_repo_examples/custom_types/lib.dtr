[Contract]: IncrementContract

[Interface]:
-() [increment]
	* Inputs:
	{
		env: Env
		incr: Integer
	}
	* Output: Integer
	* Instructions:
		$
			{ id: 3, instruction: evaluate, input: (env.clone), assign: CALL_EXPRESSION_ARG_1_0, scope: 0 }
			{ id: 6, instruction: evaluate, input: (get_state, CALL_EXPRESSION_ARG_1_0), assign: state, scope: 0 }
			{ id: 14, instruction: add, input: (state.count, incr), assign: state.count, scope: 0 }
			{ id: 22, instruction: assign, input: (incr), assign: state.last_incr, scope: 0 }
			{ id: 31, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_28, scope: 0 }
			{ id: 32, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_28.instance), assign: METHOD_CALL_EXPRESSION_27, scope: 0 }
			{ id: 33, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_27.set, STATE, state), scope: 0 }
			{ id: 0, instruction: return, input: (state.count), scope: 0 }
		$
-() [get_state]
	* Inputs:
	{
		env: Env
	}
	* Output: State
	* Instructions:
		$
			{ id: 50, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_47, scope: 0 }
			{ id: 51, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_47.instance), assign: METHOD_CALL_EXPRESSION_46, scope: 0 }
			{ id: 52, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_46.get, STATE), assign: METHOD_CALL_EXPRESSION_43, scope: 0 }
			{ id: 41, instruction: instantiate_object, input: (UDT, State, 0, 0), assign: METHOD_CALL_ARG_1_38, scope: 0 }
			{ id: 53, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_43.unwrap_or, METHOD_CALL_ARG_1_38), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:* (State_STRUCT)
{
	count: Integer
	last_incr: Integer
}

:[User Defined Types]
[State]:
* [STATE]
	* Type: String
	* Initial Value: "STATE"
:[State]

