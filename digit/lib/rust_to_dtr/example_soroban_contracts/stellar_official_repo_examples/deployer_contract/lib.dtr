[Contract]: Contract

[Interface]:
-() [init]
	* Inputs:
	{
		env: Env
		value: Integer
	}
	* Instructions:
		$
			{ id: 8, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 9, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.instance), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.set, KEY, value), scope: 0 }
		$
-() [value]
	* Inputs:
	{
		env: Env
	}
	* Output: Integer
	* Instructions:
		$
			{ id: 18, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_15, scope: 0 }
			{ id: 19, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_15.instance), assign: METHOD_CALL_EXPRESSION_14, scope: 0 }
			{ id: 20, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_14.get, KEY), assign: METHOD_CALL_EXPRESSION_11, scope: 0 }
			{ id: 21, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_11.unwrap), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]
[State]:
* [KEY]
	* Type: String
	* Initial Value: "value"
:[State]

