[Contract]: Deployer

[Interface]:
-() [deploy]
	* Inputs:
	{
		env: Env
		deployer: Address
		wasm_hash: ByteStringSmall
		salt: ByteStringSmall
		init_fn: String
		init_args: List<Val>
	}
	* Output: (Address, Val)
	* Instructions:
		$
			{ id: 7, instruction: evaluate, input: (env.current_contract_address), assign: BINARY_EXPRESSION_RIGHT_3, scope: 0 }
			{ id: 8, instruction: evaluate, input: (not_equal_to, deployer, BINARY_EXPRESSION_RIGHT_3), assign: CONDITIONAL_JUMP_ASSIGNMENT_1, scope: 0 }
			{ id: 10, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_1, 9), scope: 0 }
			{ id: 13, instruction: evaluate, input: (deployer.require_auth), assign: Thing_to_return, scope: 9 }
			{ id: 14, instruction: jump, input: (0), scope: 9 }
			{ id: 25, instruction: evaluate, input: (env.deployer), assign: METHOD_CALL_EXPRESSION_22, scope: 0 }
			{ id: 26, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_22.with_address, deployer, salt), assign: METHOD_CALL_EXPRESSION_17, scope: 0 }
			{ id: 27, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_17.deploy, wasm_hash), assign: deployed_address, scope: 0 }
			{ id: 36, instruction: evaluate, input: (env.invoke_contract, deployed_address, init_fn, init_args), assign: res|||Val, scope: 0 }
			{ id: 39, instruction: instantiate_object, input: (Tuple, deployed_address, res), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]

