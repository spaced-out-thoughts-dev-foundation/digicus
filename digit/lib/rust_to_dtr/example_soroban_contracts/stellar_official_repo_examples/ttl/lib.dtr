[Contract]: TtlContract

[Interface]:
-() [setup]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 8, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 9, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.persistent), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.set, DataKey::MyKey, 0), scope: 0 }
			{ id: 19, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_16, scope: 0 }
			{ id: 20, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_16.instance), assign: METHOD_CALL_EXPRESSION_15, scope: 0 }
			{ id: 21, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_15.set, DataKey::MyKey, 1), scope: 0 }
			{ id: 30, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_27, scope: 0 }
			{ id: 31, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_27.temporary), assign: METHOD_CALL_EXPRESSION_26, scope: 0 }
			{ id: 32, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_26.set, DataKey::MyKey, 2), scope: 0 }
		$
-() [extend_persistent]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 43, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_40, scope: 0 }
			{ id: 44, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_40.persistent), assign: METHOD_CALL_EXPRESSION_39, scope: 0 }
			{ id: 45, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_39.extend_ttl, DataKey::MyKey, 1000, 5000), scope: 0 }
		$
-() [extend_instance]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 54, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_51, scope: 0 }
			{ id: 55, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_51.instance), assign: METHOD_CALL_EXPRESSION_50, scope: 0 }
			{ id: 56, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_50.extend_ttl, 2000, 10000), scope: 0 }
		$
-() [extend_temporary]
	* Inputs:
	{
		env: Env
	}
	* Instructions:
		$
			{ id: 67, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_64, scope: 0 }
			{ id: 68, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_64.temporary), assign: METHOD_CALL_EXPRESSION_63, scope: 0 }
			{ id: 69, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_63.extend_ttl, DataKey::MyKey, 3000, 7000), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (DataKey_ENUM)
{
	MyKey: ()
}

:[User Defined Types]