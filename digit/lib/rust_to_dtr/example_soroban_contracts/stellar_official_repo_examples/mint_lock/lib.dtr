[Contract]: Contract

[Interface]:
-() [set_admin]
	* Inputs:
	{
		env: Env
		new_admin: Address
	}
	* Instructions:
		$
			{ id: 8, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_5, scope: 0 }
			{ id: 9, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_5.instance), assign: METHOD_CALL_EXPRESSION_4, scope: 0 }
			{ id: 10, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_4.get, StorageKey::Admin), assign: INPUT_VALUE_NAME_FOR_LET_1, scope: 0 }
			{ id: 11, instruction: try_assign, input: (INPUT_VALUE_NAME_FOR_LET_1, Some(admin)), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ id: 13, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 12), scope: 0 }
			{ id: 16, instruction: evaluate, input: (admin.require_auth), scope: 12 }
			{ id: 17, instruction: jump, input: (0), scope: 12 }
			{ id: 26, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_23, scope: 0 }
			{ id: 27, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_23.instance), assign: METHOD_CALL_EXPRESSION_22, scope: 0 }
			{ id: 28, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_22.set, StorageKey::Admin, new_admin), scope: 0 }
		$
-() [admin]
	* Inputs:
	{
		env: Env
	}
	* Output: Address
	* Instructions:
		$
			{ id: 36, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_33, scope: 0 }
			{ id: 37, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_33.instance), assign: METHOD_CALL_EXPRESSION_32, scope: 0 }
			{ id: 38, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_32.get, StorageKey::Admin), assign: METHOD_CALL_EXPRESSION_29, scope: 0 }
			{ id: 39, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_29.unwrap), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [set_minter]
	* Inputs:
	{
		env: Env
		contract: Address
		minter: Address
		config: MinterConfig
	}
	* Instructions:
		$
			{ id: 44, instruction: evaluate, input: (env.clone), assign: CALL_EXPRESSION_ARG_1_41, scope: 0 }
			{ id: 47, instruction: evaluate, input: (admin, CALL_EXPRESSION_ARG_1_41), assign: METHOD_CALL_EXPRESSION_40, scope: 0 }
			{ id: 48, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_40.require_auth), scope: 0 }
			{ id: 63, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_60, scope: 0 }
			{ id: 64, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_60.persistent), assign: METHOD_CALL_EXPRESSION_59, scope: 0 }
			{ id: 56, instruction: evaluate, input: (StorageKey::Minter, contract, minter), assign: METHOD_CALL_ARG_1_49, scope: 0 }
			{ id: 65, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_59.set, METHOD_CALL_ARG_1_49, config), scope: 0 }
		$
-() [minter]
	* Inputs:
	{
		env: Env
		contract: Address
		minter: Address
	}
	* Output: Result<(MinterConfig, Integer, MinterStats), Error>
	* Instructions:
		$
			{ id: 85, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_82, scope: 0 }
			{ id: 86, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_82.persistent), assign: METHOD_CALL_EXPRESSION_81, scope: 0 }
			{ id: 73, instruction: evaluate, input: (contract.clone), assign: CALL_EXPRESSION_ARG_1_70, scope: 0 }
			{ id: 77, instruction: evaluate, input: (minter.clone), assign: CALL_EXPRESSION_ARG_2_74, scope: 0 }
			{ id: 80, instruction: evaluate, input: (StorageKey::Minter, CALL_EXPRESSION_ARG_1_70, CALL_EXPRESSION_ARG_2_74), assign: METHOD_CALL_ARG_1_69, scope: 0 }
			{ id: 87, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_81.get, METHOD_CALL_ARG_1_69), assign: METHOD_CALL_EXPRESSION_68, scope: 0 }
			{ id: 88, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_68.ok_or, Error::NotAuthorizedMinter), assign: config, scope: 0 }
			{ id: 94, instruction: evaluate, input: (env.ledger), assign: METHOD_CALL_EXPRESSION_91, scope: 0 }
			{ id: 95, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_91.sequence), assign: BINARY_EXPRESSION_LEFT_89, scope: 0 }
			{ id: 100, instruction: divide, input: (BINARY_EXPRESSION_LEFT_89, config.epoch_length), assign: epoch, scope: 0 }
			{ id: 125, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_122, scope: 0 }
			{ id: 126, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_122.temporary), assign: METHOD_CALL_EXPRESSION_121, scope: 0 }
			{ id: 106, instruction: evaluate, input: (contract.clone), assign: CALL_EXPRESSION_ARG_1_103, scope: 0 }
			{ id: 110, instruction: evaluate, input: (minter.clone), assign: CALL_EXPRESSION_ARG_2_107, scope: 0 }
			{ id: 120, instruction: evaluate, input: (StorageKey::MinterStats, CALL_EXPRESSION_ARG_1_103, CALL_EXPRESSION_ARG_2_107, config.epoch_length, epoch), assign: METHOD_CALL_ARG_1_102, scope: 0 }
			{ id: 127, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_121.get, METHOD_CALL_ARG_1_102), assign: METHOD_CALL_EXPRESSION_101, scope: 0 }
			{ id: 128, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_101.unwrap_or_default), assign: stats, scope: 0 }
			{ id: 133, instruction: instantiate_object, input: (Tuple, config, epoch, stats), assign: CALL_EXPRESSION_ARG_1_129, scope: 0 }
			{ id: 137, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_129), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
-() [mint]
	* Inputs:
	{
		env: Env
		contract: Address
		minter: Address
		to: Address
		amount: BigInteger
	}
	* Output: Result<(), Error>
	* Instructions:
		$
			{ id: 145, instruction: instantiate_object, input: (Tuple, contract, to, amount), assign: METHOD_CALL_EXPRESSION_141, scope: 0 }
			{ id: 147, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_141.into_val, env), assign: METHOD_CALL_ARG_1_138, scope: 0 }
			{ id: 150, instruction: evaluate, input: (minter.require_auth_for_args, METHOD_CALL_ARG_1_138), scope: 0 }
			{ id: 156, instruction: evaluate, input: (less_than, amount, 0), assign: CONDITIONAL_JUMP_ASSIGNMENT_151, scope: 0 }
			{ id: 158, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_151, 157), scope: 0 }
			{ id: 164, instruction: evaluate, input: (Err, Error::NegativeAmount), assign: RETURN_VALUE_LABEL_159, scope: 157 }
			{ id: 165, instruction: return, input: (RETURN_VALUE_LABEL_159), scope: 157 }
			{ id: 170, instruction: evaluate, input: (env.clone), assign: CALL_EXPRESSION_ARG_1_167, scope: 0 }
			{ id: 173, instruction: evaluate, input: (admin, CALL_EXPRESSION_ARG_1_167), assign: admin, scope: 0 }
			{ id: 179, instruction: evaluate, input: (not_equal_to, admin, minter), assign: CONDITIONAL_JUMP_ASSIGNMENT_174, scope: 0 }
			{ id: 181, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_174, 180), scope: 0 }
			{ id: 200, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_197, scope: 180 }
			{ id: 201, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_197.persistent), assign: METHOD_CALL_EXPRESSION_196, scope: 180 }
			{ id: 188, instruction: evaluate, input: (contract.clone), assign: CALL_EXPRESSION_ARG_1_185, scope: 180 }
			{ id: 192, instruction: evaluate, input: (minter.clone), assign: CALL_EXPRESSION_ARG_2_189, scope: 180 }
			{ id: 195, instruction: evaluate, input: (StorageKey::Minter, CALL_EXPRESSION_ARG_1_185, CALL_EXPRESSION_ARG_2_189), assign: METHOD_CALL_ARG_1_184, scope: 180 }
			{ id: 202, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_196.get, METHOD_CALL_ARG_1_184), assign: TRY_ASSIGN_RESULT_182, scope: 180 }
			{ id: 203, instruction: evaluate, input: (try_assign, Some(config), TRY_ASSIGN_RESULT_182), assign: TRY_ASSIGN_RESULT_CONDITIONAL_183, scope: 180 }
			{ id: 205, instruction: jump, input: (TRY_ASSIGN_RESULT_CONDITIONAL_183, 204), scope: 180 }
			{ id: 207, instruction: jump, input: (206), scope: 180 }
			{ id: 208, instruction: jump, input: (180), scope: 204 }
			{ id: 214, instruction: evaluate, input: (Err, Error::NotAuthorizedMinter), assign: RETURN_VALUE_LABEL_209, scope: 206 }
			{ id: 215, instruction: return, input: (RETURN_VALUE_LABEL_209), scope: 206 }
			{ id: 222, instruction: evaluate, input: (env.ledger), assign: METHOD_CALL_EXPRESSION_219, scope: 180 }
			{ id: 223, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_219.sequence), assign: BINARY_EXPRESSION_LEFT_217, scope: 180 }
			{ id: 228, instruction: divide, input: (BINARY_EXPRESSION_LEFT_217, config.epoch_length), assign: epoch, scope: 180 }
			{ id: 232, instruction: evaluate, input: (contract.clone), assign: CALL_EXPRESSION_ARG_1_229, scope: 180 }
			{ id: 236, instruction: evaluate, input: (minter.clone), assign: CALL_EXPRESSION_ARG_2_233, scope: 180 }
			{ id: 246, instruction: evaluate, input: (StorageKey::MinterStats, CALL_EXPRESSION_ARG_1_229, CALL_EXPRESSION_ARG_2_233, config.epoch_length, epoch), assign: minter_stats_key, scope: 180 }
			{ id: 254, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_251, scope: 180 }
			{ id: 255, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_251.temporary), assign: METHOD_CALL_EXPRESSION_250, scope: 180 }
			{ id: 256, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_250.get, minter_stats_key), assign: METHOD_CALL_EXPRESSION_247, scope: 180 }
			{ id: 257, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_247.unwrap_or_default), assign: minter_stats, scope: 180 }
			{ id: 265, instruction: add, input: (minter_stats.consumed_limit, amount), assign: consumed_limit, scope: 180 }
			{ id: 266, instruction: instantiate_object, input: (UDT, MinterStats, consumed_limit), assign: new_minter_stats, scope: 180 }
			{ id: 279, instruction: evaluate, input: (greater_than, new_minter_stats.consumed_limit, config.limit), assign: CONDITIONAL_JUMP_ASSIGNMENT_268, scope: 180 }
			{ id: 281, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_268, 280), scope: 180 }
			{ id: 287, instruction: evaluate, input: (Err, Error::DailyLimitInsufficient), assign: RETURN_VALUE_LABEL_282, scope: 280 }
			{ id: 288, instruction: return, input: (RETURN_VALUE_LABEL_282), scope: 280 }
			{ id: 298, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_295, scope: 180 }
			{ id: 299, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_295.temporary), assign: METHOD_CALL_EXPRESSION_294, scope: 180 }
			{ id: 300, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_294.set, minter_stats_key, new_minter_stats), scope: 180 }
			{ id: 318, instruction: evaluate, input: (env.storage), assign: METHOD_CALL_EXPRESSION_315, scope: 180 }
			{ id: 319, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_315.temporary), assign: METHOD_CALL_EXPRESSION_314, scope: 180 }
			{ id: 313, instruction: multiply, input: (epoch, config.epoch_length), assign: METHOD_CALL_ARG_3_305, scope: 180 }
			{ id: 320, instruction: evaluate, input: (METHOD_CALL_EXPRESSION_314.extend_ttl, minter_stats_key, 0, METHOD_CALL_ARG_3_305), assign: Thing_to_return, scope: 180 }
			{ id: 321, instruction: jump, input: (0), scope: 180 }
			{ id: 328, instruction: evaluate, input: (MintClient::new, env, contract), assign: client, scope: 0 }
			{ id: 335, instruction: evaluate, input: (client.mint, to, amount), scope: 0 }
			{ id: 337, instruction: instantiate_object, input: (Tuple), assign: CALL_EXPRESSION_ARG_1_336, scope: 0 }
			{ id: 341, instruction: evaluate, input: (Ok, CALL_EXPRESSION_ARG_1_336), assign: Thing_to_return, scope: 0 }
			{ id: 0, instruction: return, input: (Thing_to_return), scope: 0 }
		$
:[Interface]


[User Defined Types]:
* (Error_ENUM)
{
	NotAuthorizedMinter = 1
	DailyLimitInsufficient = 2
	NegativeAmount = 3
}

* (StorageKey_ENUM)
{
	Admin: ()
	Minter: (Address, Address)
	MinterStats: (Address, Address, Integer, Integer)
}
* (MinterConfig_STRUCT)
{
	limit: BigInteger
	epoch_length: Integer
}
* (MinterStats_STRUCT)
{
	consumed_limit: BigInteger
}

:[User Defined Types]
