[Helpers]:
-() [return_some_or_none]
	* Inputs:
	{
		x: Integer
	}
	* Output: Option<Integer>
	* Instructions:
		$
			{ id: 3, instruction: try_assign, input: (spend_left_per_token, Some(spend_left)), assign: CONDITIONAL_JUMP_ASSIGNMENT_0, scope: 0 }
			{ id: 5, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_0, 4), scope: 0 }
			{ id: 13, instruction: jump, input: (12), scope: 0 }
			{ id: 10, instruction: evaluate, input: (Some, spend_left), assign: spend_left|||Option<BigInteger>, scope: 4 }
			{ id: 11, instruction: jump, input: (0), scope: 4 }
			{ id: 18, instruction: evaluate, input: (env.storage), assign: INPUT_VALUE_NAME_FOR_LET_15, scope: 12 }
			{ id: 19, instruction: try_assign, input: (INPUT_VALUE_NAME_FOR_LET_15, Some(limit_left)), assign: CONDITIONAL_JUMP_ASSIGNMENT_14, scope: 12 }
			{ id: 21, instruction: jump, input: (CONDITIONAL_JUMP_ASSIGNMENT_14, 20), scope: 12 }
			{ id: 29, instruction: jump, input: (28), scope: 12 }
			{ id: 26, instruction: evaluate, input: (Some, limit_left), assign: spend_left|||Option<BigInteger>, scope: 20 }
			{ id: 27, instruction: jump, input: (12), scope: 20 }
			{ id: 30, instruction: assign, input: (None), assign: spend_left|||Option<BigInteger>, scope: 28 }
			{ id: 31, instruction: jump, input: (12), scope: 28 }
			{ id: 32, instruction: jump, input: (0), scope: 12 }
			{ id: 0, instruction: return, input: (spend_left), scope: 0 }
		$

:[Helpers]